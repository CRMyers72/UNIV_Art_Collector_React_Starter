{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Search.js","components/Title.js","components/Preview.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","setIsLoading","searchTerm","searchValue","setSearchResults","className","href","onClick","event","preventDefault","results","console","error","Feature","featuredResult","id","title","dated","culture","technique","dimensions","medium","people","displayname","name","department","division","contact","credit","images","map","image","index","key","src","baseimageurl","alt","alttext","Loading","props","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","catch","message","handleSubmit","onSubmit","htmlFor","type","placeholder","onChange","target","length","Title","Preview","setFeaturedResult","searchResults","info","fetchPage","pageUrl","disabled","prev","next","record","primaryimageurl","description","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aac84068.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n *\n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = \"https://api.harvardartmuseums.org\";\nexport const KEY = \"apikey=01b8e6e3-e849-4cf7-ab67-9137f95dce59\";\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}/object?${KEY}&${term}=${encodeURI(\n        value.split(\"-\").join(\"|\")\n      )}`\n    );\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n *\n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${BASE_URL}/object?${KEY}&classification=${classification}&century=${century}&keyword=${queryString}`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem(\"centuries\")) {\n    return JSON.parse(localStorage.getItem(\"centuries\"));\n  }\n\n  const url = `${BASE_URL}/century?${KEY}&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem(\"centuries\", JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem(\"classifications\")) {\n    return JSON.parse(localStorage.getItem(\"classifications\"));\n  }\n\n  const url = `${BASE_URL}/classification?${KEY}&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem(\"classifications\", JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n","import React, { Fragment } from \"react\";\n\n// Don't touch this import\nimport { fetchQueryResultsFromTermAndValue } from \"../api\";\n\n/**\n * We need a new component called Searchable which:\n * \n * Has a template like this:\n\n * <span className=\"content\">\n *  <a href=\"#\" onClick={async (event) => {}}>SOME SEARCH TERM</a>\n * </span>\n *\n * You'll need to read searchTerm, searchValue, setIsLoading, and setSearchResults off of the props.\n * \n * When someone clicks the anchor tag, you should:\n * \n * - preventDefault on the event\n * - call setIsLoading, set it to true\n * \n * Then start a try/catch/finally block:\n * \n * try:\n *  - await the result of fetchQueryResultsFromTermAndValue, passing in searchTerm and searchValue\n *  - send the result to setSearchResults (which will update the Preview component)\n * catch: \n *  - console.error the error\n * finally:\n *  - call setIsLoading, set it to false\n */\n\nconst Searchable = ({\n  setIsLoading,\n  searchTerm,\n  searchValue,\n  setSearchResults,\n}) => {\n  return (\n    <span className=\"content\">\n      <a\n        href=\"#\"\n        onClick={async (event) => {\n          event.preventDefault();\n          setIsLoading(true);\n          try {\n            const results = await fetchQueryResultsFromTermAndValue(\n              searchTerm,\n              searchValue\n            );\n            setSearchResults(results);\n          } catch (error) {\n            console.error(error);\n          } finally {\n            setIsLoading(false);\n          }\n        }}\n      >\n        {searchValue}\n      </a>\n    </span>\n  );\n};\n\n/**\n * We need a new component called Feature which looks like this when no featuredResult is passed in as a prop:\n *\n * <main id=\"feature\"></main>\n *\n * And like this when one is:\n *\n * <main id=\"feature\">\n *   <div className=\"object-feature\">\n *     <header>\n *       <h3>OBJECT TITLE</h3>\n *       <h4>WHEN IT IS DATED</h4>\n *     </header>\n *     <section className=\"facts\">\n *       <span className=\"title\">FACT NAME</span>\n *       <span className=\"content\">FACT VALUE</span>\n *       <span className=\"title\">NEXT FACT NAME</span>\n *       <span className=\"content\">NEXT FACT VALUE</span>\n *     </section>\n *     <section className=\"photos\">\n *       <img src=IMAGE_URL alt=SOMETHING_WORTHWHILE />\n *     </section>\n *   </div>\n * </main>\n *\n * The different facts look like this: title, dated, images, primaryimageurl, description, culture, style,\n * technique, medium, dimensions, people, department, division, contact, creditline\n *\n * The <Searchable /> ones are: culture, technique, medium (first toLowerCase it), and person.displayname (one for each PEOPLE)\n *\n * NOTE: people and images are likely to be arrays, and will need to be mapped over if they exist\n *\n * This component should be exported as default.\n */\nconst Feature = ({ setIsLoading, featuredResult, setSearchResults }) => {\n  return (\n    <Fragment>\n      <main id=\"feature\">\n        {featuredResult && (\n          <div className=\"object-feature\">\n            <header>\n              <h3>{featuredResult.title}</h3>\n              <h4>{featuredResult.dated}</h4>\n            </header>\n            <ul>\n              <b>\n                {\" \"}\n                {featuredResult.culture ? (\n                  <section className=\"facts\">\n                    <span className=\"title\">Culture</span>\n                    <span className=\"content\">\n                      <Searchable\n                        setIsLoading={setIsLoading}\n                        searchTerm=\"culture\"\n                        searchValue={featuredResult.culture}\n                        setSearchResults={setSearchResults}\n                      />\n                    </span>\n                  </section>\n                ) : null}{\" \"}\n              </b>\n              <b>\n                {featuredResult.technique ? (\n                  <section className=\"facts\">\n                    <span className=\"title\">Technique</span>\n                    <span className=\"content\">\n                      <Searchable\n                        setIsLoading={setIsLoading}\n                        searchTerm=\"technique\"\n                        searchValue={featuredResult.technique}\n                        setSearchResults={setSearchResults}\n                      />\n                    </span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.dimensions ? (\n                  <section className=\"facts\">\n                    <span className=\"title\">Dimensions </span>\n                    <span className=\"content\">{featuredResult.dimensions}</span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.medium ? (\n                  <section className=\"facts\">\n                    <span className=\"title\">Medium</span>\n                    <span className=\"content\">\n                      <Searchable\n                        setIsLoading={setIsLoading}\n                        searchTerm=\"medium\"\n                        searchValue={featuredResult.medium}\n                        setSearchResults={setSearchResults}\n                      />\n                    </span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.people ? (\n                  <section className=\"facts\">\n                    <span className=\"title\">Person</span>\n                    <span className=\"content\">\n                      <span>\n                        <Searchable\n                          setIsLoading={setIsLoading}\n                          searchTerm=\"people\"\n                          searchValue={featuredResult.people[0].displayname}\n                          setSearchResults={setSearchResults}\n                        />\n                      </span>\n                      {featuredResult.people[1] ? (\n                        <span>\n                          <span>, </span>\n                          <Searchable\n                            setIsLoading={setIsLoading}\n                            searchTerm=\"people\"\n                            searchValue={featuredResult.people[1].name}\n                            setSearchResults={setSearchResults}\n                          />\n                        </span>\n                      ) : null}\n                      {featuredResult.people[2] ? (\n                        <span>\n                          <span>, </span>\n                          <Searchable\n                            setIsLoading={setIsLoading}\n                            searchTerm=\"people\"\n                            searchValue={featuredResult.people[2].name}\n                            setSearchResults={setSearchResults}\n                          />\n                        </span>\n                      ) : null}\n                      {featuredResult.people[3] ? (\n                        <span>\n                          <span>, </span>\n                          <Searchable\n                            setIsLoading={setIsLoading}\n                            searchTerm=\"people\"\n                            searchValue={featuredResult.people[3].name}\n                            setSearchResults={setSearchResults}\n                          />\n                        </span>\n                      ) : null}\n                    </span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.department ? (\n                  <section>\n                    <span className=\"title\">Department </span>\n                    <span className=\"content\">{featuredResult.department}</span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.division ? (\n                  <section>\n                    <span className=\"title\">Division </span>\n                    <span className=\"content\">{featuredResult.division}</span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.contact ? (\n                  <section>\n                    <span className=\"title\">Contact </span>\n                    <span className=\"content\">{featuredResult.contact}</span>\n                  </section>\n                ) : null}\n              </b>\n              <b>\n                {featuredResult.credit ? (\n                  <section>\n                    <span className=\"title\">Credit </span>\n                    <span className=\"content\">{featuredResult.credit}</span>\n                  </section>\n                ) : null}\n              </b>\n            </ul>\n            <section className=\"photos\">\n              {featuredResult.images.map((image, index) => (\n                <img key={index} src={image.baseimageurl} alt={image.alttext} />\n              ))}\n            </section>\n          </div>\n        )}\n      </main>\n    </Fragment>\n  );\n};\n\nexport default Feature;\n","import React from \"react\";\n\n//   Create and export a component called Loading which uses this static HTML template:\nfunction Loading(props) {\n  return (\n    <div id=\"loading\">\n      <h2 className=\"message\">Searching...</h2>\n    </div>\n  );\n}\nexport default Loading;\n","import React, { useEffect, useState } from \"react\";\n\n/**\n * Don't touch these imports!\n */\nimport {\n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n} from \"../api\";\n\nconst Search = ({ setIsLoading, setSearchResults }) => {\n  // Make sure to destructure setIsLoading and setSearchResults from the props\n\n  // const startLoading = setIsLoading;\n  // const results = setSearchResults;\n\n  /**\n   * We are at the Search component, a child of app. This has a form, so we need to use useState for\n   * our controlled inputs:\n   *\n   * centuryList, setCenturyList (default should be an empty array, [])\n   * classificationList, setClassificationList (default should be an empty array, [])\n   * queryString, setQueryString (default should be an empty string, '')\n   * century, setCentury (default should be the string 'any')\n   * classification, setClassification (default should be the string 'any')\n   */\n  const [centuryList, setCenturyList] = useState([]);\n  const [classificationList, setClassificationList] = useState([]);\n  const [queryString, setQueryString] = useState(\"\");\n  const [century, setCentury] = useState(\"any\");\n  const [classification, setClassification] = useState(\"any\");\n\n  /**\n   * Inside of useEffect, use Promise.all([]) with fetchAllCenturies and fetchAllClassifications\n   *\n   * In the .then() callback pass the returned lists to setCenturyList and setClassificationList\n   *\n   * Make sure to console.error on caught errors from the API methods.\n   */\n  useEffect(() => {\n    Promise.all([fetchAllCenturies(), fetchAllClassifications()])\n      .then((results) => {\n        setCenturyList(results[0]);\n        setClassificationList(results[1]);\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }, []);\n\n  /**\n   * This is a form element, so we need to bind an onSubmit handler to it which:\n   *\n   * calls event.preventDefault()\n   * calls setIsLoading, set it to true\n   *\n   * then, in a try/catch/finally block:\n   *\n   * try to:\n   * - get the results from fetchQueryResults({ century, classification, queryString })\n   * - pass them to setSearchResults\n   *\n   * catch: error to console.error\n   *\n   * finally: call setIsLoading, set it to false\n   */\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    setIsLoading(true);\n    try {\n      const response = await fetchQueryResults({\n        century,\n        classification,\n        queryString,\n      });\n      setSearchResults(response);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <form id=\"search\" onSubmit={handleSubmit}>\n      <fieldset>\n        <label htmlFor=\"keywords\">Query</label>\n        <input\n          id=\"keywords\"\n          type=\"text\"\n          placeholder=\"enter keywords...\"\n          value={queryString}\n          onChange={(event) => {\n            setQueryString(event.target.value);\n          }}\n        />\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-classification\">\n          Classification{\" \"}\n          <span className=\"classification-count\">\n            ({classificationList.length})\n          </span>\n        </label>\n        <select\n          name=\"classification\"\n          id=\"select-classification\"\n          value={classification}\n          onChange={(event) => setClassification(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {/* map over the classificationList, return an <option /> */}\n          {classificationList.map((classification) => (\n            <option value={classification.name}>{classification.name}</option>\n          ))}\n        </select>\n      </fieldset>\n      <fieldset>\n        <label htmlFor=\"select-century\">\n          Century <span className=\"century-count\">({centuryList.length})</span>\n        </label>\n        <select\n          name=\"century\"\n          id=\"select-century\"\n          value={century}\n          onChange={(event) => setCentury(event.target.value)}\n        >\n          <option value=\"any\">Any</option>\n          {/* map over the centuryList, return an <option /> */}\n          {centuryList.map((century) => (\n            <option value={century.name}>{century.name}</option>\n          ))}\n        </select>\n      </fieldset>\n      <button>SEARCH</button>\n    </form>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\n/**\n * Create/export a component called Title which uses this static HTML as the template:\n **/\nfunction Title(props) {\n  return (\n    <div id=\"title\">\n      <h1>The Art Collector</h1>\n      <h5>Search the Harvard Art Museums' Private Collections</h5>\n    </div>\n  );\n}\nexport default Title;\n","import React from \"react\";\n\n/**\n * We need to import fetchQueryResultsFromURL since we will sometimes have urls in info.prev and info.next\n * which are query urls.\n */\nimport { fetchQueryResultsFromURL } from \"../api\";\n\nconst Preview = ({\n  setSearchResults,\n  setFeaturedResult,\n  setIsLoading,\n  searchResults,\n}) => {\n  /**\n   * Destructure setSearchResults, setFeaturedResult, and setIsLoading from props\n   * and also destructure info and records from props.searchResults\n   *\n   * You need info, records, setSearchResults, setFeaturedResult, and setIsLoading as available constants\n   */\n  const { info, records } = searchResults;\n\n  /**\n   * Don't touch this function, it's good to go.\n   *\n   * It has to be defined inside the Preview component to have access to setIsLoading, setSearchResults, etc...\n   */\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <aside id=\"preview\">\n      <header className=\"pagination\">\n        {/* This button should be disabled if nothing is set in info.prev, and should call fetchPage with info.prev when clicked */}\n        <button\n          disabled={!info.prev}\n          className=\"previous\"\n          onClick={() => fetchPage(info.prev)}\n        >\n          Previous\n        </button>\n        {/* This button should be disabled if nothing is set in info.next, and should call fetchPage with info.next when clicked */}\n        <button\n          disabled={!info.next}\n          className=\"next\"\n          onClick={() => fetchPage(info.next)}\n        >\n          Next\n        </button>\n      </header>\n      <section className=\"results\">\n        {/* Here we should map over the records, and render something like this for each one:\n          <div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n            }}>\n            { \n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing \n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n            }\n          </div>\n        */}\n        {records.map((record, index) => (\n          <div\n            key={index}\n            className=\"object-preview\"\n            onClick={(event) => {\n              // prevent the default\n              // set the featured result to be this record, using setFeaturedResult\n              event.preventDefault();\n              setFeaturedResult(record);\n            }}\n          >\n            {\n              // if the record.primaryimageurl exists, show this: <img src={ record.primaryimageurl } alt={ record.description } />, otherwise show nothing\n              record.primaryimageurl && (\n                <img src={record.primaryimageurl} alt={record.description} />\n              )\n            }\n            {\n              // if the record.title exists, add this: <h3>{ record.title }</h3>, otherwise show this: <h3>MISSING INFO</h3>\n              record.title ? <h3>{record.title}</h3> : <h3>MISSING INFO</h3>\n            }\n          </div>\n        ))}\n      </section>\n    </aside>\n  );\n};\n\nexport default Preview;\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// These imports won't work until you fix ./components/index.js\nimport { Feature, Loading, Preview, Search, Title } from \"./components\";\n\nconst App = () => {\n  /**\n   * We are at the App level component, which is top-most. Any state which needs to be shared between immediate children should\n   * be made here, so create state pairs using useState() for:\n   *\n   * searchResults, setSearchResults (default should be this object:  {info: {}, records: []} )\n   * featuredResult, setFeaturedResult (default should be null)\n   * isLoading, setIsLoading (default should be false)\n   */\n  const [searchResults, setSearchResults] = useState({ info: {}, records: [] });\n  const [featuredResult, setFeaturedResult] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <div className=\"app\">\n      <Title />\n      <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n      <Preview\n        setSearchResults={setSearchResults}\n        searchResults={searchResults}\n        setFeaturedResult={setFeaturedResult}\n        setIsLoading={setIsLoading}\n      />\n      <Feature\n        setIsLoading={setIsLoading}\n        featuredResult={featuredResult}\n        setSearchResults={setSearchResults}\n      />\n\n      {isLoading ? <Loading /> : null}\n    </div>\n  );\n};\n\n/**\n * Boostrap the <App /> component into the '#app' element in the DOM,\n * using ReactDOM.render();\n */\nReactDOM.render(<App />, document.getElementById(\"app\"));\n"],"sourceRoot":""}